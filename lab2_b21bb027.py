# -*- coding: utf-8 -*-
"""lab2_b21bb027

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PG08dVEOWOQGm5IDkRGKDoO5Yt6cHIjm

Q1 Assign a type to each of the following features manually as well as using a code if possible:
(a) Job Title, (b) salary, (c ) company size
"""

import pandas as pd
import numpy as np
import statistics as st
data = pd.read_csv('/content/job_salaries.csv', encoding = "windows-1252")

work_year = data['work_year']
work_year_mean = work_year.mean()
work_year = work_year.fillna(work_year_mean)
data['work_year'] = work_year

experience_level = data['experience_level']
print(experience_level.mode(),"\n")
experience_level = experience_level.fillna('SE')
data['experience_level'] = experience_level

employment_type = data['employment_type']
print(employment_type.mode(),'\n')
employment_type = employment_type.fillna('FT')
data['employment_type'] = employment_type

job_title = data['job_title']
print(job_title.mode(),'\n')
job_title = job_title.fillna('Data Scientist')
data['job_title'] = job_title

salary = data['salary']
salary_mean = salary.mean()
salary = salary.fillna(salary_mean)
data['salary'] = salary

salary_currency = data['salary_currency']
print(salary_currency.mode(),'\n')
salary_currency = salary_currency.fillna('USD')
data['salary_currency'] = salary_currency

salary_in_usd = data['salary_in_usd']
salary_in_usd_mean = salary_in_usd.mean()
salary_in_usd = salary_in_usd.fillna(salary_in_usd_mean)
data['salary_in_usd'] = salary_in_usd

employee_residence = data['employee_residence']
print(employee_residence.mode(),'\n')
employee_residence = employee_residence.fillna('US')
data['employee_residence'] = employee_residence

remote_ratio = data['remote_ratio']
remote_ratio_mean = remote_ratio.mean()
remote_ratio = remote_ratio.fillna(remote_ratio_mean)
data['remote_ratio'] = remote_ratio

company_location = data['company_location']
print(company_location.mode(),'\n')
company_location = company_location.fillna('US')
data['company_location'] = company_location

company_size = data['company_size']
print(company_size.mode(),'\n')
company_size = company_size.fillna('M')
data['company_size'] = company_size

print(data)
print(data.info())

"""Q2) Write a function to handle missing values in the dataset (e.g., any NA, NaN values), and
demonstrate/discuss its functioning in the report.
"""

import pandas as pd
data = pd.read_csv("/content/job_salaries.csv")

a = data['job_title']
print("Data type of job_title is",a.dtype)

b = data['salary']
print("Data type of salary is",b.dtype)

c = data['company_size']
print("Data type of company_size is",c.dtype)

"""Q3) Write a function to reduce noise (any error) in individual attributes and demonstrate/discuss
its functioning in the report.
"""

import pandas as pd
data = pd.read_csv("/content/job_salaries.csv")

work_year = data['work_year']
work_year_mean = work_year.mean()
work_year = work_year.fillna(work_year_mean)
data['work_year'] = work_year

salary = data['salary']
salary_mean = salary.mean()
salary = salary.fillna(salary_mean)
data['salary'] = salary

salary_in_usd = data['salary_in_usd']
salary_in_usd_mean = salary_in_usd.mean()
salary_in_usd = salary_in_usd.fillna(salary_in_usd_mean)
data['salary_in_usd'] = salary_in_usd

remote_ratio = data['remote_ratio']
remote_ratio_mean = remote_ratio.mean()
remote_ratio = remote_ratio.fillna(remote_ratio_mean)
data['remote_ratio'] = remote_ratio

print(data)
print(data.info())

"""Q4) Write a function to encode all the categorical features in the dataset according to the type of
variable jointly, and demonstrate/discuss its functioning in the report.
"""

import pandas as pd
import numpy as np
Super_store = pd.read_csv('job_salaries.csv')
df = pd.DataFrame(Super_store)
df.info()

print('/n /n /n /n')


from sklearn.preprocessing import LabelEncoder
lbcode = LabelEncoder()
def encoding(n):
  for i in n.columns:
      if n[i].dtypes == "object":
        n[i] = lbcode.fit_transform(n[i])
  return n
encoding(df)

"""Q5

Write a function to normalize / scale the features either individually or jointly, and demonstrate/discuss its functioning in the report.


"""

from sklearn.preprocessing import StandardScaler
import pandas as pd
import numpy as np
Super_store = pd.read_csv('/content/job_salaries.csv', encoding = "windows-1252")
df = pd.DataFrame(Super_store)
def normalize(n):
  scaler = StandardScaler()
  X = df.iloc[:,[n]]
  scaler.fit(X)
  data_set=pd.DataFrame(scaler.transform(X))
  return data_set
normalize(5)

"""Q6) Write a function to create a random split of the data into three subsets (train, validation and
test sets) in the ratio of 70:20:10 respectively.
(a) Using numpy operation
"""

import numpy as np

def slice(x):
  index_array = np.random.randint(df.shape[0], size=int(0.7*df, shape[0]))
  return x.iloc[index_array]
slice(df)

from sklearn.model_selection import train_test_split
df_train, df_test= train_test_split(df, test_size=0.3, random_state = 2021)
df_train